# Makefile for C software compiler with Clang or GCC

# Configuration
NAME = test
DEBUG = true
CC = clang
LIBS = 
SHELL = zsh

# Automatic setup using the configuration
# Set warning flags and defines for debug
ifeq ($(DEBUG),true)
	WARNS += -Wall -Wno-pointer-sign
	DEFINES += -D DEBUG
endif

# C compilation stuff
CLFAGS = -std=c99 
ifeq ($(CC),clang)
	CFLAGS += -fno-caret-diagnostics -fno-diagnostics-show-option
else ifneq ($(findstring gcc,$(GCC)),"")
	CFLAGS += -fno-diagnostics-show-caret -fno-diagnostics-show-option
endif
CFLAGS += $(DEFINES) $(WARNS)

# Static analysis stuff
CHECK = cppcheck
CHECK_VERBOSITY = --enable=warning,style,performance
CKFLAGS = $(CHECK_VERBOSITY) --language=c --std=c99 --template='\t[{severity}] Line {line}: {message}' $(DEFINES) -q

# Color... it's better to read with them.
CRED =		$(shell echo "\033[0;31m")
CGREEN =	$(shell echo "\033[0;32m")
CYELLOW =	$(shell echo "\033[0;33m")
CBLUE =		$(shell echo "\033[0;34m")
CMAGENTA =	$(shell echo "\033[0;35m")
CCYAN =		$(shell echo "\033[0;36m")
CEND =		$(shell echo "\033[0m")

# Error/warning highlight command for GCC/Clang and CppCheck
HIGHLIGHT_START =  2>&1 | sed
ifeq ($(SHELL), bash)
	HIGHLIGHT_END = ; exit "$${PIPESTATUS[0]}"
else ifeq ($(SHELL), zsh)
	HIGHLIGHT_END = ; exit "$${pipestatus[1]}"
endif
HIGHLIGHT_COLOR = -e "s/\[error\]/\[$(CRED)error$(CEND)\]/g" -e "s/\[style\]/\[$(CYELLOW)style$(CEND)\]/g" -e "s/\[warning\]/\[$(CYELLOW)warning$(CEND)\]/g" -e "s/\[info\]/\[$(CCYAN)info$(CEND)\]/g"
CCHIGHLIGHT = $(HIGHLIGHT_START) -e "s/^src\/\([a-zA-Z0-9_]*\).c: In function \(.*\):/\t[info]: In file \1.c function \2/" -e "s/^\(.*\):\([0-9]\+\):\([0-9]\+\): \(warning\|error\): \(.*\)/\t\[\4\] Line \2: \5/g" $(HIGHLIGHT_COLOR) $(HIGHLIGHT_END)
CKHIGHLIGHT = $(HIGHLIGHT_START) -e "/Please report this to Cppcheck developers/d" $(HIGHLIGHT_COLOR) $(HIGHLIGHT_END)
LDHIGHLIGHT = $(HIGHLIGHT_START) -e "/linker command failed with exit code\(.*\)/d;/ld returned/d" -e "s/^src\/\([a-zA-Z0-9_]*\).o: In function \(.*\):/\t[info]: In file \1.c function \2/" -e "/no input files/d" -e "s/^\(.*\): undefined reference to \(.*\)/\1: error: undefined reference to \2/" -e "s/^\(.*\): \(warning\|error\|note\): \(.*\)/\t\[\2\]: \3/g" $(HIGHLIGHT_COLOR) $(HIGHLIGHT_END)

# Source files, object files...
SRC = $(wildcard src/*.c)
OBJ = $(SRC:.c=.o)

# Make methods
ifeq ($(DEBUG),true)
all:		infos fclean $(NAME) run
else
all:		infos $(NAME)
endif

infos:
			@echo "$(CCYAN)Building $(NAME) (arch=$(ARCH), debug=$(DEBUG)) $(CEND)"

$(NAME):	$(OBJ)
			@echo "$(CCYAN)LD $(NAME) $(CEND)"
			@$(CC) $(LDFLAGS) -o $(NAME) $(OBJ) $(LDHIGHLIGHT)

%.o:		%.c
			@echo "$(CGREEN)CC $< $(CEND)"
			@$(CC) $(CFLAGS) -o $@ -c $< $(CCHIGHLIGHT)
ifeq ($(DEBUG),true)
			@$(CHECK) $(CKFLAGS) $< $(CKHIGHLIGHT)
endif

clean:
			@echo "$(CRED)RM *.o $(CEND)"
			@rm -f $(OBJ) $(ASMOBJ)

fclean:		clean
			@echo "$(CRED)RM $(NAME) $(CEND)"
			@rm -f $(NAME)

re:			fclean all

ifeq ($(DEBUG),true)
run:
			@echo "$(CMAGENTA)EX $(NAME) $(CEND)"
			@echo "$(CYELLOW)Everything below is $(NAME)'s debug messages: $(CEND)"
			@./$(NAME)
endif

.PHONY: all clean fclean re run
